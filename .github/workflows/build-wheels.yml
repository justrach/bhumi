name: Build and publish wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# Add permissions needed for creating releases
permissions:
  contents: write
  id-token: write

jobs:
  linux-x86_64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        # Build both manylinux versions for broader compatibility
        manylinux: ["2_17", "2_28"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: |
          # Install system dependencies needed for Rust/Python builds
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config libpq-dev
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --strip
          sccache: 'true'
          manylinux: ${{ matrix.manylinux }}
          container: quay.io/pypa/manylinux_${{ matrix.manylinux }}_x86_64
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.python-version }}-x86_64-${{ matrix.manylinux }}
          path: dist

  # Separate job for aarch64 Linux with specific config for cross-compilation
  linux-aarch64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        # Build both manylinux versions for broader ARM compatibility
        manylinux: ["2_17", "2_28"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      # Set up QEMU for cross-platform emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Use cross-compilation container with platform specified
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: aarch64
          args: >-
            --release
            --out dist
            --strip
          manylinux: ${{ matrix.manylinux }}
          container: quay.io/pypa/manylinux_${{ matrix.manylinux }}_aarch64
          docker-options: "--platform linux/arm64"
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.python-version }}-aarch64-${{ matrix.manylinux }}
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        # Support both x64 and x86 for broader Windows compatibility
        target: [x64, x86]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --strip
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.python-version }}-${{ matrix.target }}
          path: dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        target: [x86_64, aarch64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --strip
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.python-version }}-${{ matrix.target }}
          path: dist

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  collect-wheels:
    name: Collect all wheels
    runs-on: ubuntu-latest
    needs: [linux-x86_64, linux-aarch64, windows, macos, build-sdist]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: all-wheels
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: all-wheels
      - name: Upload combined wheels
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: all-wheels

  # Test installation from wheels
  test-wheels:
    name: Test wheel installation
    needs: [collect-wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
      fail-fast: false
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: all-wheels
          path: wheelhouse
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and test wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Find and install the appropriate wheel for this Python version and OS
          python -c "
          import os, sys, platform
          version = f'{sys.version_info.major}{sys.version_info.minor}'
          
          # Determine platform suffix
          if sys.platform.startswith('win'):
              platform_tag = 'win_amd64' if platform.machine().endswith('64') else 'win32'
          elif sys.platform.startswith('darwin'):
              platform_tag = 'macosx'
          else:
              platform_tag = 'linux_x86_64'
          
          wheels = [f for f in os.listdir('wheelhouse') if f.endswith('.whl') and f'cp{version}' in f and (platform_tag in f or 'any' in f)]
          if wheels:
              wheel = wheels[0]
              os.system(f'pip install wheelhouse/{wheel}')
              print(f'Installed wheel: {wheel}')
          else:
              print(f'No wheel found for Python {sys.version_info.major}.{sys.version_info.minor} on {sys.platform}')
              print('Available wheels:')
              for f in os.listdir('wheelhouse'):
                  if f.endswith('.whl'):
                      print(f'  {f}')
              exit(1)
          "
          
          # Test the installation
          python -c "
          try:
              import bhumi
              print('✅ Bhumi imported successfully')
              # Test basic functionality
              from bhumi.utils import print_performance_status
              print_performance_status()
              print('✅ All tests passed!')
          except Exception as e:
              print(f'❌ Test failed: {e}')
              exit(1)
          "

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [collect-wheels, test-wheels]
    # This conditional allows manual triggering without requiring the tag push
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: all-wheels
          path: dist
      - name: List wheels
        run: ls -la dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
          
      # Create GitHub Release for tagged versions
      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Generate Release Notes
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > release_notes.md || echo "* Initial release" > release_notes.md
          echo "## Bhumi v${{ steps.get_version.outputs.VERSION }}" | cat - release_notes.md > temp && mv temp release_notes.md
          echo "" >> release_notes.md
          echo "## Artifacts" >> release_notes.md
          echo "This release includes wheels for:" >> release_notes.md
          echo "- Linux (x86_64, aarch64) - manylinux 2.17 and 2.28" >> release_notes.md
          echo "- macOS (x86_64, arm64)" >> release_notes.md
          echo "- Windows (x64, x86)" >> release_notes.md
          echo "- Python 3.8, 3.9, 3.10, 3.11, 3.12, 3.13" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "pip install bhumi==${{ steps.get_version.outputs.VERSION }}" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "**No Rust compiler required!** 🎊" >> release_notes.md
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
