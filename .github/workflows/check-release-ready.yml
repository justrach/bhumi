name: ✅ Check Release Readiness

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  check-build:
    name: 🔍 Test Build Process
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11']

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: 🏗️ Test Build
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist
          
      - name: ✅ Build Success
        run: echo "✅ Build successful on ${{ matrix.os }} with Python ${{ matrix.python-version }}"

      - name: 🧪 Test Installation
        run: |
          # List what's in dist folder for debugging
          echo "Contents of dist folder:"
          ls -la dist/
          
          # Find compatible wheel for current platform
          python -c "
          import os, sys, platform
          
          # Get current platform info
          python_version = f'cp{sys.version_info.major}{sys.version_info.minor}'
          
          if sys.platform.startswith('linux'):
              platform_tags = ['linux_x86_64', 'manylinux']
          elif sys.platform.startswith('darwin'):
              arch = platform.machine()
              if arch == 'arm64':
                  platform_tags = ['macosx_11_0_arm64', 'macosx']
              else:
                  platform_tags = ['macosx_10_9_x86_64', 'macosx']
          elif sys.platform.startswith('win'):
              platform_tags = ['win_amd64', 'win32']
          else:
              platform_tags = []
          
          print(f'Looking for wheels compatible with: {python_version}, platform: {sys.platform}, tags: {platform_tags}')
          
          # Find compatible wheel
          wheels = [f for f in os.listdir('dist') if f.endswith('.whl')]
          compatible_wheel = None
          
          for wheel in wheels:
              print(f'Checking wheel: {wheel}')
              if python_version in wheel:
                  for tag in platform_tags:
                      if tag in wheel:
                          compatible_wheel = wheel
                          print(f'Found compatible wheel: {wheel}')
                          break
                  if compatible_wheel:
                      break
          
          if not compatible_wheel:
              print('No platform-specific wheel found, trying any available wheel...')
              # Fallback: try any wheel with matching Python version
              for wheel in wheels:
                  if python_version in wheel:
                      compatible_wheel = wheel
                      print(f'Using fallback wheel: {wheel}')
                      break
          
          if compatible_wheel:
              exit_code = os.system(f'pip install dist/{compatible_wheel}')
              if exit_code != 0:
                  print(f'Failed to install {compatible_wheel}')
                  exit(1)
          else:
              print('No compatible wheel found!')
              print('Available wheels:')
              for wheel in wheels:
                  print(f'  {wheel}')
              exit(1)
          "
          
          python -c "import bhumi; print('✅ Import successful')"

  check-version:
    name: 🏷️ Check Version Consistency
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔍 Check Version Format
        run: |
          python -c "
          import re
          with open('pyproject.toml') as f:
              content = f.read()
          
          version_match = re.search(r'version = \"([^\"]+)\"', content)
          if not version_match:
              print('❌ No version found in pyproject.toml')
              exit(1)
          
          version = version_match.group(1)
          print(f'📦 Current version: {version}')
          
          # Check semantic versioning format
          if not re.match(r'^\d+\.\d+\.\d+(?:-[a-zA-Z0-9]+)?$', version):
              print(f'❌ Invalid version format: {version}')
              print('Use semantic versioning (e.g., 1.0.0, 1.0.0-beta1)')
              exit(1)
          
          print('✅ Version format is valid')
          "

  check-dependencies:
    name: 📋 Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Validate pyproject.toml
        run: |
          python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          
          print('✅ pyproject.toml is valid TOML')
          print(f'📦 Package: {data[\"project\"][\"name\"]}')
          print(f'🏷️ Version: {data[\"project\"][\"version\"]}')
          print(f'📝 Description: {data[\"project\"][\"description\"]}')
          print(f'👤 Authors: {data[\"project\"][\"authors\"]}')
          print(f'🐍 Python requirement: {data[\"project\"][\"requires-python\"]}')
          print(f'📦 Dependencies: {data[\"project\"][\"dependencies\"]}')
          "

      - name: 🔍 Check Required Files
        run: |
          echo "Checking required files for release..."
          
          files_to_check=(
            "README.md"
            "LICENSE" 
            "pyproject.toml"
            "Cargo.toml"
            "src/lib.rs"
          )
          
          for file in "${files_to_check[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file is missing"
              exit 1
            fi
          done
          
          echo "✅ All required files present"
